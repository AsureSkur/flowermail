#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include<vector>
//数据库相关头文件
#include <dbms_functions.cpp>

#define SERVER_PORT 6666
#define CONNECT_CLOSE "end"
#define DBMS_PWD "123456"

//using namespace std;

//check username in the database, if found return CHECKED, else if not found return CANT_FIND_USER,// else return -1
int check_username(char* username);

//check whether the password matches the username, if match return CHECKED, else return CANT_MATCH_PASSWORD;
//after using check_username(), use check_password()
int check_password(char* username,char* password);

//check register, if register succeed, return CHECKED, else return ALREADY_EXIST;
int user_register(char* username,char* password);

//upload mail to SQL, if upload succeed, return CHECKED, else return CANT_FIND_USER;
int upload_mail(char* sendername, char* receivername, char* title, char* text);

//get the mailnum, mailtitle, sendername in the user's mailbox, return vector;
std::vector<std::string> get_maillist(char* username);
//get mail text by mailid, return string;
std::string get_mailtext(char* mailid);

int str_split(char* front,char* latter,char delim = ';');
int wait_for_recv(int client,char* recvbuf);
char* int_to_string(int num);

//a function for login check;
int login_process(int client);
int register_process(int client);
int recvlist_process(int client);
int sendmail_process(int client);

int socket_server();

int main()
{
    socket_server();
    return 0;
}

//a function repeated wait for recv string from server
int wait_for_recv(int client,char* recvbuf)
{
    int idatanum;
    while(1)
    {
        recvbuf[0] = '\0';
        idatanum = recv(client, recvbuf, 1024, 0);
        if (idatanum < 0)
        {
            perror("recv null");
            continue;
        }
        recvbuf[idatanum] = '\0';
        printf("recv:%s\n",recvbuf);
        break;
    }
    return 0;
}

void int_to_string(char*str,int num)
{
    char* p = str;
    int mod = 1;
    while (mod <= num)
    {
        mod *= 10;
    }
    mod = mod / 10;
    while (mod >= 1)
    {
        *p = '0' + num / mod % 10;
        p++;
        *p = '\0';
        mod = mod / 10;
    }
    return;
}

int str_split(char* front,char* latter,char delim)
{
    char* p=front;
    while((*p)!=delim&&(*p)!='\0')
    {
        p++;
    }
    if((*p)=='\0')
    {
        latter[0]='\0';
        return -1;
    }
    strcpy(latter,p+1);
    *p='\0';
    return 0;
}

int socket_server()
{
    //调用socket函数返回的文件描述符

    int serverSocket;

    //声明两个套接字sockaddr_in结构体变量，分别表示客户端和服务器

    struct sockaddr_in server_addr;

    struct sockaddr_in clientAddr;

    int addr_len = sizeof(clientAddr);

    int client;
    char recvbuf[200];
    char sendbuf[200];


    //socket函数，失败返回-1
    //int socket(int domain, int type, int protocol);
    //第一个参数表示使用的地址类型，一般都是ipv4，AF_INET
    //第二个参数表示套接字类型：tcp：面向连接的稳定数据传输SOCK_STREAM
    //第三个参数设置为0
    if ((serverSocket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket");
        return 1;
    }

    bzero(&server_addr, sizeof(server_addr));

    //初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    //ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    //对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)
    //bind三个参数：服务器端的套接字的文件描述符，

    if (bind(serverSocket, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {
        perror("connect");
        return 1;
    }

    //设置服务器上的socket为监听状态
    if (listen(serverSocket, 5) < 0) {
        perror("listen");
        return 1;

    }

    while (1)
    {

        printf("监听端口: %d\n", SERVER_PORT);

        //调用accept函数后，会进入阻塞状态
        //accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，
        //serverSocket和client。
        //serverSocket仍然继续在监听状态，client则负责接收和发送数据
        //clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号
        //addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。
        //传出的是客户端地址结构体的实际长度。
        //出错返回-1
        client = accept(serverSocket, (struct sockaddr *) &clientAddr, (socklen_t *) &addr_len);

        if (client < 0)
        {
            perror("accept");
            continue;

        }

        printf("等待消息...\n");
        //inet_ntoa ip地址转换函数，将网络字节序IP转换为点分十进制IP
        //表达式：char *inet_ntoa (struct in_addr);
        printf("IP is %s\n", inet_ntoa(clientAddr.sin_addr));
        printf("Port is %d\n", htons(clientAddr.sin_port));

        while (1)
        {
            printf("读取消息:");
            wait_for_recv(client,recvbuf);

            if (strcmp(recvbuf, CONNECT_CLOSE) == 0)
            {
                break;
            }
            else if(strcmp(recvbuf,"login")==0)
            {
                login_process(client);
                break;
            }
            else if(strcmp(recvbuf,"register")==0)
            {
                register_process(client);
                break;
            }
            //check mail list
            else if(strcmp(recvbuf,"getmlist")==0)
            {
                recvlist_process(client);
                break;
            }
            //send mail
            else if(strcmp(recvbuf,"sendmail")==0)
            {
                sendmail_process((client));
                break;
            }
            //see mail detail
            else if(strcmp(recvbuf,"seedetail")==0)
            {

            }
            //send file
            else if(strcmp(recvbuf,"")==0)
            {

            }
        }
        strcpy(sendbuf,CONNECT_CLOSE);
        send(client,sendbuf,sizeof(sendbuf),0);
    }

    close(serverSocket);
    return 0;
}

int login_process(int client)
{
    char sendbuf[200];
    char recvbuf[200];

    strcpy(sendbuf,"okforlogin");
    printf("send:%s\n",sendbuf);
    send(client, sendbuf, strlen(sendbuf), 0);

    //wait for username;
    wait_for_recv(client,recvbuf);

    if(strcmp(recvbuf,CONNECT_CLOSE)==0)
    {
        return -1;
    }
    else if(check_username(recvbuf))
    {
        char username[200];
        strcpy(username,recvbuf);

        strcpy(sendbuf,"userexists");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);

        //wait for password
        wait_for_recv(client,recvbuf);

        if(strcmp(recvbuf,CONNECT_CLOSE)==0)
        {
            return -1;
        }
        else if(check_password(username,recvbuf))
        {
            strcpy(sendbuf,"passwordright");
            printf("send:%s\n",sendbuf);
            send(client,sendbuf,strlen(sendbuf),0);
            return 0;
        }
        else
        {
            strcpy(sendbuf,"passwordwrong");
            printf("send:%s\n",sendbuf);
            send(client,sendbuf,strlen(sendbuf),0);
            return 1;
        }

    }
    else
    {
        strcpy(sendbuf,"nouser");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);
        return -1;
    }

}

int register_process(int client)
{
    char sendbuf[200];
    char recvbuf[200];

    strcpy(sendbuf,"okforregister");
    printf("send:%s\n",sendbuf);
    send(client, sendbuf, strlen(sendbuf), 0);

    //wait for username;
    wait_for_recv(client,recvbuf);

    if(strcmp(recvbuf,CONNECT_CLOSE)==0)
    {
        return -1;
    }
    else if(!check_username(recvbuf))
    {
        char username[200];
        strcpy(username,recvbuf);

        strcpy(sendbuf,"usernameavailble");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);

        //wait for password
        wait_for_recv(client,recvbuf);

        if(strcmp(recvbuf,CONNECT_CLOSE)==0)
        {
            return -1;
        }
        else if(user_register(username,recvbuf))
        {
            strcpy(sendbuf,"registersucceed");
            printf("send:%s\n",sendbuf);
            send(client,sendbuf,strlen(sendbuf),0);
            return 0;
        }
        else
        {
            strcpy(sendbuf,"registerfailed");
            printf("send:%s\n",sendbuf);
            send(client,sendbuf,strlen(sendbuf),0);
            return -1;
        }

    }
    else
    {
        strcpy(sendbuf,"userhasexisted");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);
        return -1;
    }

}

int recvlist_process(int client)
{
    char sendbuf[200];
    char recvbuf[200];

    strcpy(sendbuf,"okforlist");
    printf("send:%s\n",sendbuf);
    send(client, sendbuf, strlen(sendbuf), 0);

    //wait for username;
    wait_for_recv(client,recvbuf);

    if(strcmp(recvbuf,CONNECT_CLOSE)==0)
    {
        return -1;
    }
    if(check_username(recvbuf))
    {
        char username[200];
        strcpy(username,recvbuf);
        strcpy(sendbuf,"userexists;");
        //cal the mailnum in the list
        std::vector<std::string> maillist = get_maillist(recvbuf);
        char mailnum_str[50];
        //mailnum<0 means error

        int_to_string(mailnum_str,maillist.size());
        strcat(sendbuf,mailnum_str);

        printf("send:%s\n",sendbuf);
        send(client, sendbuf, strlen(sendbuf), 0);

        //wait for checksignal;
        wait_for_recv(client,recvbuf);
        if(strcmp(recvbuf,CONNECT_CLOSE)==0)
        {
            return -1;
        }

        for(int i=0;i<maillist.size();i++)
        {
            strcpy(sendbuf,maillist[i].c_str());
            send(client,sendbuf,strlen(sendbuf),0);
            wait_for_recv(client,recvbuf);
            if(strcmp(recvbuf,CONNECT_CLOSE)==0)
            {
                return -1;
            }
        }
        return 0;
    }
    else
    {
        printf("Username Error!\n");
        return -2;
    }
    return 0;
}

int sendmail_process(int client)
{
    char sendbuf[200];
    char recvbuf[1000];

    strcpy(sendbuf,"okformailsend");
    printf("send:%s\n",sendbuf);
    send(client, sendbuf, strlen(sendbuf), 0);

    //wait for username;
    wait_for_recv(client,recvbuf);

    if(strcmp(recvbuf,CONNECT_CLOSE)==0)
    {
        return -1;
    }

    //"withfile/nofile";sender;recver;title;maintext
    char sender[1000],recver[1000],title[1000],maintext[1000];
    str_split(recvbuf,sender,';');
    str_split(sender,recver);
    str_split(recver,title,';');
    str_split(title,maintext,';');
    //--------------------------------------------
    if(check_username(sender)&&check_username(recver))
    {
        /*
         * create database link, write message into database
         */
        //file
        if(strcmp(recvbuf,"withfile")==0)
        {
            //a func for file deliver

        }
        strcpy(sendbuf,"sendmailsuccess");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);
    }
    else
    {
        strcpy(sendbuf,"usernameerror");
        printf("send:%s\n",sendbuf);
        send(client,sendbuf,strlen(sendbuf),0);
        return -1;
    }
    return 0;
}

int seemailtext_process(int client)
{
    char sendbuf[1000];
    char recvbuf[200];

    strcpy(sendbuf,"okformailtext");
    printf("send:%s\n",sendbuf);
    send(client, sendbuf, strlen(sendbuf), 0);

    //wait for mailid;username
    wait_for_recv(client,recvbuf);
    if(strcmp(recvbuf,CONNECT_CLOSE)==0)
    {
        return -1;
    }
    char mailid[200],recver[200];
    /*
     * string text=get_mailtext(char*mailid,char*recver)
     */
    send(client, sendbuf, strlen(sendbuf), 0);
    return 0;

}

int check_username(char* username){
    //连接数据库
    QSqlDatabase db = connect_dbms("flowermail", "root", DBMS_PWD);
    QSqlQuery query(db);

    int check_status = check_username(query,username);
    db.close();

    return check_status==CHECKED;
}

int check_password(char* username,char* password){
    //连接数据库
    QSqlDatabase db = connect_dbms("flowermail", "root", DBMS_PWD);
    if(db.isOpenError()) return CONNECTION_FAILD;
    QSqlQuery query(db);

    int check_status = check_password(query,username,password);
    db.close();

    return check_status==CHECKED;
}

int user_register(char* username,char* password){
    //连接数据库
    QSqlDatabase db = connect_dbms("flowermail", "root", DBMS_PWD);
    if(db.isOpenError()) return CONNECTION_FAILD;
    QSqlQuery query(db);

    int check_status = user_register(query, username, password);
    db.close();

    return check_status==CHECKED;
}

int upload_mail(char* sendername, char* receivername, char* title, char* text){
      //连接数据库
    QSqlDatabase db = connect_dbms("flowermail", "root", DBMS_PWD);
    if(db.isOpenError()) return CONNECTION_FAILD;
    QSqlQuery query(db);

    int check_status = send_mail(query, receivername,sendername, title, text);
    db.close();

    return check_status==CHECKED;
}

std::vector<std::string> get_maillist(char* username){
    //连接数据库
  QSqlDatabase db = connect_dbms("flowermail", "root", DBMS_PWD);
  QSqlQuery query(db);
  QSqlQuery tempquery(db);

  std::vector<std::string> vec = get_mail_and_sender_by_receiver(query, tempquery, username);
  db.close();
  return vec;
}
